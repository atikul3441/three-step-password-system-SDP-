#include <stdio.h>
#include <stdlib.h>

#define MAX 50

int adj[MAX][MAX];   // Adjacency matrix
int visited[MAX];    // Visited array
int recStack[MAX];   // Recursion stack
int n;               // Number of nodes

// DFS function to detect cycle
int isCyclic(int v) {
    if (!visited[v]) {
        visited[v] = 1;
        recStack[v] = 1;

        for (int i = 0; i < n; i++) {
            if (adj[v][i]) {
                if (!visited[i] && isCyclic(i))
                    return 1;
                else if (recStack[i])
                    return 1;
            }
        }
    }
    recStack[v] = 0; // remove from recursion stack
    return 0;
}

int main() {
    int e;
    printf("Enter number of nodes: ");
    scanf("%d", &n);
    printf("Enter number of edges: ");
    scanf("%d", &e);

    // Initialize adjacency matrix
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            adj[i][j] = 0;

    printf("Enter edges (from to):\n");
    for (int i = 0; i < e; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        adj[u][v] = 1;
    }

    // Initialize visited and recursion arrays
    for (int i = 0; i < n; i++)
        visited[i] = recStack[i] = 0;

    // Check for cycle
    int deadlock = 0;
    for (int i = 0; i < n; i++) {
        if (isCyclic(i)) {
            deadlock = 1;
            break;
        }
    }

    if (deadlock)
        printf("Deadlock detected!\n");
    else
        printf("No Deadlock.\n");

    return 0;
}
